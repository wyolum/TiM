#include <Adafruit_NeoPixel.h>

// Parameter 1 = number of pixels in strip
// Parameter 2 = pin number (most are valid)
// Parameter 3 = pixel type flags, add together as needed:
//   NEO_RGB     Pixels are wired for RGB bitstream
//   NEO_GRB     Pixels are wired for GRB bitstream
//   NEO_KHZ400  400 KHz bitstream (e.g. FLORA pixels)
//   NEO_KHZ800  800 KHz bitstream (e.g. High Density LED strip)
// Adafruit_NeoPixel strip = Adafruit_NeoPixel(250, A5, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel strip = Adafruit_NeoPixel(16, A5, NEO_GRB + NEO_KHZ800);

void setup() {
  Serial.begin(115200);
  pinMode(7, OUTPUT);
  digitalWrite(7, HIGH);
  // pinMode(A2, OUTPUT);
  // pinMode(A3, OUTPUT);


  strip.begin();
  strip.setPixelColor(0, strip.Color(25, 0, 0));
  strip.setPixelColor(1, strip.Color(0, 25, 0));
  strip.setPixelColor(2, strip.Color(0, 0, 25));
  strip.setPixelColor(3, strip.Color(25, 25, 25));
  rainbowCycle(0, 255);
  strip.show(); // Initialize all pixels to 'off'
  
}
void setall(uint32_t color){
  for(uint8_t i = 0; i < strip.numPixels(); i++){
    strip.setPixelColor(i, color);
  }
  strip.show();
}
int count = 0;
void loop() {
  count++;
  count %=255;
  
  // Some example procedures showing how to display to the pixels:
  uint8_t val = 255;
  //colorWipe(strip.Color(val, 0, 0), 0); // Red
  //colorWipe(strip.Color(0, val, 0), 0); // Green
  //colorWipe(strip.Color(0, 0, val), 0); // Blue
  // setall(strip.Color(count, 0, 0));
  // strip.show();
   // colorWipe(strip.Color(val, val, val), 0); // Blue
  // delay(1000);
  // rainbow(0);
  int jj = 0;
  while(1){
    jj++;
    uint32_t c = strip.getPixelColor(0);
    for(uint8_t i = 0; i < strip.numPixels() - 1; i++){
      strip.setPixelColor(i, strip.getPixelColor(i + 1));
    }
    strip.setPixelColor(strip.numPixels() - 1, c);
    strip.show();
    delay(100);
  }
}

// Fill the dots one after the other with a color
void colorWipe(uint32_t c, uint8_t wait) {
  for(uint16_t i=0; i<strip.numPixels(); i++) {
      strip.setPixelColor(i, c);
      strip.show();
      if(wait){
	delay(wait);
      }
  }
}

void rainbow(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256; j++) {
    for(i=0; i<strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel((i+j) & 255, 255));
    }
    strip.show();
    delay(wait);
  }
}

// Slightly different, this makes the rainbow equally distributed throughout
void rainbowCycle(uint8_t wait, uint8_t imax) {
  uint16_t i, j;

  for(j=0; j<256*5; j++) { // 5 cycles of all colors on wheel
    for(i=0; i< strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255, 
				   imax));
    }
    strip.show();
    delay(wait);
  }
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos, uint8_t imax) {
  uint32_t r, g, b;
  if(WheelPos < 85) {
    r = WheelPos * 3;
    g = 255 - WheelPos * 3;
    b = 0;
  } else if(WheelPos < 170) {
    WheelPos -= 85;
    r = 255 - WheelPos * 3;
    g = 0;
    b = WheelPos * 3;
  } else {
    WheelPos -= 170;
    r = 0;
    g = WheelPos * 3;
    b = 255 - WheelPos * 3;
  }
  r = r * imax / 255;
  g = g * imax / 255;
  b = b * imax / 255;
  return strip.Color(r, g, b);
}

